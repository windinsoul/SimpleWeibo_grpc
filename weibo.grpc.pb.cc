// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: weibo.proto

#include "weibo.pb.h"
#include "weibo.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace weibo {

static const char* Weibo_method_names[] = {
  "/weibo.Weibo/Regist",
  "/weibo.Weibo/Login",
  "/weibo.Weibo/PublishPost",
  "/weibo.Weibo/Follow",
  "/weibo.Weibo/CommentOnPost",
  "/weibo.Weibo/Like",
  "/weibo.Weibo/GetHot",
  "/weibo.Weibo/GetHotTopic",
  "/weibo.Weibo/GetPostByTopicId",
  "/weibo.Weibo/GetPostByUserId",
  "/weibo.Weibo/PostFeedByRecommend",
  "/weibo.Weibo/PostFeedByFollow",
};

std::unique_ptr< Weibo::Stub> Weibo::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Weibo::Stub> stub(new Weibo::Stub(channel, options));
  return stub;
}

Weibo::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Regist_(Weibo_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Login_(Weibo_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PublishPost_(Weibo_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Follow_(Weibo_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CommentOnPost_(Weibo_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Like_(Weibo_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetHot_(Weibo_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetHotTopic_(Weibo_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetPostByTopicId_(Weibo_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetPostByUserId_(Weibo_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_PostFeedByRecommend_(Weibo_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_PostFeedByFollow_(Weibo_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status Weibo::Stub::Regist(::grpc::ClientContext* context, const ::weibo::RegistReq& request, ::weibo::RegistRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::weibo::RegistReq, ::weibo::RegistRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Regist_, context, request, response);
}

void Weibo::Stub::async::Regist(::grpc::ClientContext* context, const ::weibo::RegistReq* request, ::weibo::RegistRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::weibo::RegistReq, ::weibo::RegistRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Regist_, context, request, response, std::move(f));
}

void Weibo::Stub::async::Regist(::grpc::ClientContext* context, const ::weibo::RegistReq* request, ::weibo::RegistRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Regist_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::weibo::RegistRes>* Weibo::Stub::PrepareAsyncRegistRaw(::grpc::ClientContext* context, const ::weibo::RegistReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::weibo::RegistRes, ::weibo::RegistReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Regist_, context, request);
}

::grpc::ClientAsyncResponseReader< ::weibo::RegistRes>* Weibo::Stub::AsyncRegistRaw(::grpc::ClientContext* context, const ::weibo::RegistReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegistRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Weibo::Stub::Login(::grpc::ClientContext* context, const ::weibo::LoginReq& request, ::weibo::LoginRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::weibo::LoginReq, ::weibo::LoginRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Login_, context, request, response);
}

void Weibo::Stub::async::Login(::grpc::ClientContext* context, const ::weibo::LoginReq* request, ::weibo::LoginRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::weibo::LoginReq, ::weibo::LoginRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void Weibo::Stub::async::Login(::grpc::ClientContext* context, const ::weibo::LoginReq* request, ::weibo::LoginRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::weibo::LoginRes>* Weibo::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::weibo::LoginReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::weibo::LoginRes, ::weibo::LoginReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Login_, context, request);
}

::grpc::ClientAsyncResponseReader< ::weibo::LoginRes>* Weibo::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::weibo::LoginReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoginRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Weibo::Stub::PublishPost(::grpc::ClientContext* context, const ::weibo::PublishPostReq& request, ::weibo::PublishPostRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::weibo::PublishPostReq, ::weibo::PublishPostRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PublishPost_, context, request, response);
}

void Weibo::Stub::async::PublishPost(::grpc::ClientContext* context, const ::weibo::PublishPostReq* request, ::weibo::PublishPostRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::weibo::PublishPostReq, ::weibo::PublishPostRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PublishPost_, context, request, response, std::move(f));
}

void Weibo::Stub::async::PublishPost(::grpc::ClientContext* context, const ::weibo::PublishPostReq* request, ::weibo::PublishPostRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PublishPost_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::weibo::PublishPostRes>* Weibo::Stub::PrepareAsyncPublishPostRaw(::grpc::ClientContext* context, const ::weibo::PublishPostReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::weibo::PublishPostRes, ::weibo::PublishPostReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PublishPost_, context, request);
}

::grpc::ClientAsyncResponseReader< ::weibo::PublishPostRes>* Weibo::Stub::AsyncPublishPostRaw(::grpc::ClientContext* context, const ::weibo::PublishPostReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPublishPostRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Weibo::Stub::Follow(::grpc::ClientContext* context, const ::weibo::FollowReq& request, ::weibo::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::weibo::FollowReq, ::weibo::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Follow_, context, request, response);
}

void Weibo::Stub::async::Follow(::grpc::ClientContext* context, const ::weibo::FollowReq* request, ::weibo::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::weibo::FollowReq, ::weibo::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Follow_, context, request, response, std::move(f));
}

void Weibo::Stub::async::Follow(::grpc::ClientContext* context, const ::weibo::FollowReq* request, ::weibo::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Follow_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::weibo::Response>* Weibo::Stub::PrepareAsyncFollowRaw(::grpc::ClientContext* context, const ::weibo::FollowReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::weibo::Response, ::weibo::FollowReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Follow_, context, request);
}

::grpc::ClientAsyncResponseReader< ::weibo::Response>* Weibo::Stub::AsyncFollowRaw(::grpc::ClientContext* context, const ::weibo::FollowReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFollowRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Weibo::Stub::CommentOnPost(::grpc::ClientContext* context, const ::weibo::CommentReq& request, ::weibo::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::weibo::CommentReq, ::weibo::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CommentOnPost_, context, request, response);
}

void Weibo::Stub::async::CommentOnPost(::grpc::ClientContext* context, const ::weibo::CommentReq* request, ::weibo::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::weibo::CommentReq, ::weibo::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CommentOnPost_, context, request, response, std::move(f));
}

void Weibo::Stub::async::CommentOnPost(::grpc::ClientContext* context, const ::weibo::CommentReq* request, ::weibo::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CommentOnPost_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::weibo::Response>* Weibo::Stub::PrepareAsyncCommentOnPostRaw(::grpc::ClientContext* context, const ::weibo::CommentReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::weibo::Response, ::weibo::CommentReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CommentOnPost_, context, request);
}

::grpc::ClientAsyncResponseReader< ::weibo::Response>* Weibo::Stub::AsyncCommentOnPostRaw(::grpc::ClientContext* context, const ::weibo::CommentReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCommentOnPostRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Weibo::Stub::Like(::grpc::ClientContext* context, const ::weibo::LikeReq& request, ::weibo::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::weibo::LikeReq, ::weibo::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Like_, context, request, response);
}

void Weibo::Stub::async::Like(::grpc::ClientContext* context, const ::weibo::LikeReq* request, ::weibo::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::weibo::LikeReq, ::weibo::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Like_, context, request, response, std::move(f));
}

void Weibo::Stub::async::Like(::grpc::ClientContext* context, const ::weibo::LikeReq* request, ::weibo::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Like_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::weibo::Response>* Weibo::Stub::PrepareAsyncLikeRaw(::grpc::ClientContext* context, const ::weibo::LikeReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::weibo::Response, ::weibo::LikeReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Like_, context, request);
}

::grpc::ClientAsyncResponseReader< ::weibo::Response>* Weibo::Stub::AsyncLikeRaw(::grpc::ClientContext* context, const ::weibo::LikeReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLikeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::weibo::PostRes>* Weibo::Stub::GetHotRaw(::grpc::ClientContext* context, const ::weibo::GetHotPostReq& request) {
  return ::grpc::internal::ClientReaderFactory< ::weibo::PostRes>::Create(channel_.get(), rpcmethod_GetHot_, context, request);
}

void Weibo::Stub::async::GetHot(::grpc::ClientContext* context, const ::weibo::GetHotPostReq* request, ::grpc::ClientReadReactor< ::weibo::PostRes>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::weibo::PostRes>::Create(stub_->channel_.get(), stub_->rpcmethod_GetHot_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::weibo::PostRes>* Weibo::Stub::AsyncGetHotRaw(::grpc::ClientContext* context, const ::weibo::GetHotPostReq& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::weibo::PostRes>::Create(channel_.get(), cq, rpcmethod_GetHot_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::weibo::PostRes>* Weibo::Stub::PrepareAsyncGetHotRaw(::grpc::ClientContext* context, const ::weibo::GetHotPostReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::weibo::PostRes>::Create(channel_.get(), cq, rpcmethod_GetHot_, context, request, false, nullptr);
}

::grpc::ClientReader< ::weibo::HotTopicRes>* Weibo::Stub::GetHotTopicRaw(::grpc::ClientContext* context, const ::weibo::Blank& request) {
  return ::grpc::internal::ClientReaderFactory< ::weibo::HotTopicRes>::Create(channel_.get(), rpcmethod_GetHotTopic_, context, request);
}

void Weibo::Stub::async::GetHotTopic(::grpc::ClientContext* context, const ::weibo::Blank* request, ::grpc::ClientReadReactor< ::weibo::HotTopicRes>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::weibo::HotTopicRes>::Create(stub_->channel_.get(), stub_->rpcmethod_GetHotTopic_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::weibo::HotTopicRes>* Weibo::Stub::AsyncGetHotTopicRaw(::grpc::ClientContext* context, const ::weibo::Blank& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::weibo::HotTopicRes>::Create(channel_.get(), cq, rpcmethod_GetHotTopic_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::weibo::HotTopicRes>* Weibo::Stub::PrepareAsyncGetHotTopicRaw(::grpc::ClientContext* context, const ::weibo::Blank& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::weibo::HotTopicRes>::Create(channel_.get(), cq, rpcmethod_GetHotTopic_, context, request, false, nullptr);
}

::grpc::ClientReader< ::weibo::PostRes>* Weibo::Stub::GetPostByTopicIdRaw(::grpc::ClientContext* context, const ::weibo::GetPostByTopicIdReq& request) {
  return ::grpc::internal::ClientReaderFactory< ::weibo::PostRes>::Create(channel_.get(), rpcmethod_GetPostByTopicId_, context, request);
}

void Weibo::Stub::async::GetPostByTopicId(::grpc::ClientContext* context, const ::weibo::GetPostByTopicIdReq* request, ::grpc::ClientReadReactor< ::weibo::PostRes>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::weibo::PostRes>::Create(stub_->channel_.get(), stub_->rpcmethod_GetPostByTopicId_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::weibo::PostRes>* Weibo::Stub::AsyncGetPostByTopicIdRaw(::grpc::ClientContext* context, const ::weibo::GetPostByTopicIdReq& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::weibo::PostRes>::Create(channel_.get(), cq, rpcmethod_GetPostByTopicId_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::weibo::PostRes>* Weibo::Stub::PrepareAsyncGetPostByTopicIdRaw(::grpc::ClientContext* context, const ::weibo::GetPostByTopicIdReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::weibo::PostRes>::Create(channel_.get(), cq, rpcmethod_GetPostByTopicId_, context, request, false, nullptr);
}

::grpc::ClientReader< ::weibo::PostRes>* Weibo::Stub::GetPostByUserIdRaw(::grpc::ClientContext* context, const ::weibo::GetPostByUserIdReq& request) {
  return ::grpc::internal::ClientReaderFactory< ::weibo::PostRes>::Create(channel_.get(), rpcmethod_GetPostByUserId_, context, request);
}

void Weibo::Stub::async::GetPostByUserId(::grpc::ClientContext* context, const ::weibo::GetPostByUserIdReq* request, ::grpc::ClientReadReactor< ::weibo::PostRes>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::weibo::PostRes>::Create(stub_->channel_.get(), stub_->rpcmethod_GetPostByUserId_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::weibo::PostRes>* Weibo::Stub::AsyncGetPostByUserIdRaw(::grpc::ClientContext* context, const ::weibo::GetPostByUserIdReq& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::weibo::PostRes>::Create(channel_.get(), cq, rpcmethod_GetPostByUserId_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::weibo::PostRes>* Weibo::Stub::PrepareAsyncGetPostByUserIdRaw(::grpc::ClientContext* context, const ::weibo::GetPostByUserIdReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::weibo::PostRes>::Create(channel_.get(), cq, rpcmethod_GetPostByUserId_, context, request, false, nullptr);
}

::grpc::ClientReader< ::weibo::PostRes>* Weibo::Stub::PostFeedByRecommendRaw(::grpc::ClientContext* context, const ::weibo::PostFeedReq& request) {
  return ::grpc::internal::ClientReaderFactory< ::weibo::PostRes>::Create(channel_.get(), rpcmethod_PostFeedByRecommend_, context, request);
}

void Weibo::Stub::async::PostFeedByRecommend(::grpc::ClientContext* context, const ::weibo::PostFeedReq* request, ::grpc::ClientReadReactor< ::weibo::PostRes>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::weibo::PostRes>::Create(stub_->channel_.get(), stub_->rpcmethod_PostFeedByRecommend_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::weibo::PostRes>* Weibo::Stub::AsyncPostFeedByRecommendRaw(::grpc::ClientContext* context, const ::weibo::PostFeedReq& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::weibo::PostRes>::Create(channel_.get(), cq, rpcmethod_PostFeedByRecommend_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::weibo::PostRes>* Weibo::Stub::PrepareAsyncPostFeedByRecommendRaw(::grpc::ClientContext* context, const ::weibo::PostFeedReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::weibo::PostRes>::Create(channel_.get(), cq, rpcmethod_PostFeedByRecommend_, context, request, false, nullptr);
}

::grpc::ClientReader< ::weibo::PostRes>* Weibo::Stub::PostFeedByFollowRaw(::grpc::ClientContext* context, const ::weibo::PostFeedReq& request) {
  return ::grpc::internal::ClientReaderFactory< ::weibo::PostRes>::Create(channel_.get(), rpcmethod_PostFeedByFollow_, context, request);
}

void Weibo::Stub::async::PostFeedByFollow(::grpc::ClientContext* context, const ::weibo::PostFeedReq* request, ::grpc::ClientReadReactor< ::weibo::PostRes>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::weibo::PostRes>::Create(stub_->channel_.get(), stub_->rpcmethod_PostFeedByFollow_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::weibo::PostRes>* Weibo::Stub::AsyncPostFeedByFollowRaw(::grpc::ClientContext* context, const ::weibo::PostFeedReq& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::weibo::PostRes>::Create(channel_.get(), cq, rpcmethod_PostFeedByFollow_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::weibo::PostRes>* Weibo::Stub::PrepareAsyncPostFeedByFollowRaw(::grpc::ClientContext* context, const ::weibo::PostFeedReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::weibo::PostRes>::Create(channel_.get(), cq, rpcmethod_PostFeedByFollow_, context, request, false, nullptr);
}

Weibo::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Weibo_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Weibo::Service, ::weibo::RegistReq, ::weibo::RegistRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Weibo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::weibo::RegistReq* req,
             ::weibo::RegistRes* resp) {
               return service->Regist(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Weibo_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Weibo::Service, ::weibo::LoginReq, ::weibo::LoginRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Weibo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::weibo::LoginReq* req,
             ::weibo::LoginRes* resp) {
               return service->Login(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Weibo_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Weibo::Service, ::weibo::PublishPostReq, ::weibo::PublishPostRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Weibo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::weibo::PublishPostReq* req,
             ::weibo::PublishPostRes* resp) {
               return service->PublishPost(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Weibo_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Weibo::Service, ::weibo::FollowReq, ::weibo::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Weibo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::weibo::FollowReq* req,
             ::weibo::Response* resp) {
               return service->Follow(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Weibo_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Weibo::Service, ::weibo::CommentReq, ::weibo::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Weibo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::weibo::CommentReq* req,
             ::weibo::Response* resp) {
               return service->CommentOnPost(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Weibo_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Weibo::Service, ::weibo::LikeReq, ::weibo::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Weibo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::weibo::LikeReq* req,
             ::weibo::Response* resp) {
               return service->Like(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Weibo_method_names[6],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Weibo::Service, ::weibo::GetHotPostReq, ::weibo::PostRes>(
          [](Weibo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::weibo::GetHotPostReq* req,
             ::grpc::ServerWriter<::weibo::PostRes>* writer) {
               return service->GetHot(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Weibo_method_names[7],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Weibo::Service, ::weibo::Blank, ::weibo::HotTopicRes>(
          [](Weibo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::weibo::Blank* req,
             ::grpc::ServerWriter<::weibo::HotTopicRes>* writer) {
               return service->GetHotTopic(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Weibo_method_names[8],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Weibo::Service, ::weibo::GetPostByTopicIdReq, ::weibo::PostRes>(
          [](Weibo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::weibo::GetPostByTopicIdReq* req,
             ::grpc::ServerWriter<::weibo::PostRes>* writer) {
               return service->GetPostByTopicId(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Weibo_method_names[9],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Weibo::Service, ::weibo::GetPostByUserIdReq, ::weibo::PostRes>(
          [](Weibo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::weibo::GetPostByUserIdReq* req,
             ::grpc::ServerWriter<::weibo::PostRes>* writer) {
               return service->GetPostByUserId(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Weibo_method_names[10],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Weibo::Service, ::weibo::PostFeedReq, ::weibo::PostRes>(
          [](Weibo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::weibo::PostFeedReq* req,
             ::grpc::ServerWriter<::weibo::PostRes>* writer) {
               return service->PostFeedByRecommend(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Weibo_method_names[11],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Weibo::Service, ::weibo::PostFeedReq, ::weibo::PostRes>(
          [](Weibo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::weibo::PostFeedReq* req,
             ::grpc::ServerWriter<::weibo::PostRes>* writer) {
               return service->PostFeedByFollow(ctx, req, writer);
             }, this)));
}

Weibo::Service::~Service() {
}

::grpc::Status Weibo::Service::Regist(::grpc::ServerContext* context, const ::weibo::RegistReq* request, ::weibo::RegistRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Weibo::Service::Login(::grpc::ServerContext* context, const ::weibo::LoginReq* request, ::weibo::LoginRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Weibo::Service::PublishPost(::grpc::ServerContext* context, const ::weibo::PublishPostReq* request, ::weibo::PublishPostRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Weibo::Service::Follow(::grpc::ServerContext* context, const ::weibo::FollowReq* request, ::weibo::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Weibo::Service::CommentOnPost(::grpc::ServerContext* context, const ::weibo::CommentReq* request, ::weibo::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Weibo::Service::Like(::grpc::ServerContext* context, const ::weibo::LikeReq* request, ::weibo::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Weibo::Service::GetHot(::grpc::ServerContext* context, const ::weibo::GetHotPostReq* request, ::grpc::ServerWriter< ::weibo::PostRes>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Weibo::Service::GetHotTopic(::grpc::ServerContext* context, const ::weibo::Blank* request, ::grpc::ServerWriter< ::weibo::HotTopicRes>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Weibo::Service::GetPostByTopicId(::grpc::ServerContext* context, const ::weibo::GetPostByTopicIdReq* request, ::grpc::ServerWriter< ::weibo::PostRes>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Weibo::Service::GetPostByUserId(::grpc::ServerContext* context, const ::weibo::GetPostByUserIdReq* request, ::grpc::ServerWriter< ::weibo::PostRes>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Weibo::Service::PostFeedByRecommend(::grpc::ServerContext* context, const ::weibo::PostFeedReq* request, ::grpc::ServerWriter< ::weibo::PostRes>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Weibo::Service::PostFeedByFollow(::grpc::ServerContext* context, const ::weibo::PostFeedReq* request, ::grpc::ServerWriter< ::weibo::PostRes>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace weibo

